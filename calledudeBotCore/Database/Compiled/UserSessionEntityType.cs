// <auto-generated />
using System;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using calledudeBot.Database.Session;

#pragma warning disable 219, 612, 618
#nullable disable

namespace calledudeBot.Database.Compiled
{
    internal partial class UserSessionEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "calledudeBot.Database.Session.UserSession",
                typeof(UserSession),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                propertyInfo: typeof(UserSession).GetProperty("Id", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserSession).GetField("<Id>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var endTime = runtimeEntityType.AddProperty(
                "EndTime",
                typeof(DateTime),
                propertyInfo: typeof(UserSession).GetProperty("EndTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserSession).GetField("<EndTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            endTime.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var startTime = runtimeEntityType.AddProperty(
                "StartTime",
                typeof(DateTime),
                propertyInfo: typeof(UserSession).GetProperty("StartTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserSession).GetField("<StartTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            startTime.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var username = runtimeEntityType.AddProperty(
                "Username",
                typeof(string),
                propertyInfo: typeof(UserSession).GetProperty("Username", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserSession).GetField("<Username>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly));
            username.TypeMapping = SqliteStringTypeMapping.Default;

            var watchTime = runtimeEntityType.AddProperty(
                "WatchTime",
                typeof(TimeSpan),
                propertyInfo: typeof(UserSession).GetProperty("WatchTime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UserSession).GetField("<WatchTime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new TimeSpan(0, 0, 0, 0, 0));
            watchTime.TypeMapping = TimeSpanTypeMapping.Default.Clone(
                comparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => v.GetHashCode(),
                    (TimeSpan v) => v),
                keyComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => v.GetHashCode(),
                    (TimeSpan v) => v),
                providerValueComparer: new ValueComparer<TimeSpan>(
                    (TimeSpan v1, TimeSpan v2) => v1.Equals(v2),
                    (TimeSpan v) => v.GetHashCode(),
                    (TimeSpan v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "TEXT"));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "UserSession");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
